[1mdiff --git a/pages/api/healing/products/index.ts b/pages/api/healing/products/index.ts[m
[1mindex 209a6c5..d32b2c9 100644[m
[1m--- a/pages/api/healing/products/index.ts[m
[1m+++ b/pages/api/healing/products/index.ts[m
[36m@@ -11,17 +11,25 @@[m [mimport { getServerSession } from 'next-auth';[m
 import { authOptions } from '../../auth/[...nextauth]';[m
 import isAdminEmail from '../../../../lib/auth/isAdminEmail';[m
 import healingService from '../../../../lib/services/healingService';[m
[32m+[m[32mimport supabaseAdmin from '../../../../lib/supabase';[m
 [m
 export const config = { runtime: 'nodejs' };[m
 [m
 export default async function handler(req: NextApiRequest, res: NextApiResponse) {[m
   if (req.method === 'GET') {[m
     try {[m
[31m-      const result = await healingService.get_healing_products();[m
[31m-      if (result.error) {[m
[31m-        return res.status(500).json({ error: result.error });[m
[32m+[m[32m      // Query database directly to avoid circular dependency[m
[32m+[m[32m      const { data, error } = await supabaseAdmin[m
[32m+[m[32m        .from('healing_products')[m
[32m+[m[32m        .select('*')[m
[32m+[m[32m        .order('created_at', { ascending: false });[m
[32m+[m
[32m+[m[32m      if (error) {[m
[32m+[m[32m        console.error('Error fetching healing products:', error);[m
[32m+[m[32m        return res.status(500).json({ error: 'Failed to fetch healing products' });[m
       }[m
[31m-      return res.status(200).json({ data: result.data || [] });[m
[32m+[m
[32m+[m[32m      return res.status(200).json({ data: data || [] });[m
     } catch (error) {[m
       console.error('Error fetching healing products:', error);[m
       return res.status(500).json({ error: 'Internal server error' });[m
