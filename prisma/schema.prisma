datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Note: Models can be generated via `npx prisma db pull` from your Supabase schema.

/// Prisma + Supabase workflow
/// - Local development: run `npm run dev:db` (uses `prisma db push`) instead of `prisma migrate dev`.
/// - Production (Vercel): configure the build to run `npm run deploy:db` (uses `prisma migrate deploy`).
/// - Ensure `DATABASE_URL` uses Supabase's transaction pooler URI with `pgbouncer=true`.
///   Use the same value locally (admin-app/.env.local) and in Vercel environment variables.

// ============================================================================
// Supabase tables mapped to Prisma models
// ============================================================================

model Vlog {
  id             String   @id
  title          String
  description    String?
  thumbnail_url  String?
  published_at   String?
  views          String?
  duration       String?
  is_featured    Boolean  @default(false)
  display_order  Int?
  created_at     DateTime @default(now()) @db.Timestamptz
  updated_at     DateTime @default(now()) @db.Timestamptz

  @@map("vlogs")
}

model Recipe {
  id              String    @id @default(uuid()) @db.Uuid
  slug            String    @unique
  title           String
  description     String?
  hero_image_path String?
  tags            String[]  @db.Text
  status          String    @default("draft")
  created_at      DateTime  @default(now()) @db.Timestamptz
  updated_at      DateTime  @default(now()) @db.Timestamptz
  category        String?
  folder          String?
  isBeginner      Boolean   @default(false)
  isRecipeOfWeek  Boolean   @default(false)
  prepTime        String?
  cookTime        String?
  servings        Int       @default(1)
  difficulty      String    @default("Easy")
  images          String[]  @db.Text
  ingredients     String[]  @db.Text
  instructions    String[]  @db.Text

  @@map("recipes")
}

model StorefrontProduct {
  id                 String    @id @default(uuid()) @db.Uuid
  category_name      String?
  product_image_path String?
  product_title      String
  product_description String?
  amazon_url         String
  click_count        Int       @default(0)
  is_top_clicked     Boolean   @default(false)
  status             String    @default("draft")
  created_at         DateTime  @default(now()) @db.Timestamptz
  updated_at         DateTime  @default(now()) @db.Timestamptz
  slug               String?
  imageAlt           String?
  noteShort          String?
  noteLong           String?
  tags               String[]  @db.Text
  isAlexisPick       Boolean   @default(false)
  showInFavorites    Boolean   @default(false)
  sortWeight         Int       @default(0)
  usedIn             Json
  pairsWith          String[]  @db.Text
  clicks30d          Int       @default(0)

  @@map("storefront_products")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
