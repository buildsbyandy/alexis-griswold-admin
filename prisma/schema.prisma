datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Note: Models can be generated via `npx prisma db pull` from your Supabase schema.

/// Prisma + Supabase workflow
/// - Local development: run `npm run dev:db` (uses `prisma db push`) instead of `prisma migrate dev`.
/// - Production (Vercel): configure the build to run `npm run deploy:db` (uses `prisma migrate deploy`).
/// - Ensure `DATABASE_URL` uses Supabase's transaction pooler URI with `pgbouncer=true`.
///   Use the same value locally (admin-app/.env.local) and in Vercel environment variables.

// ============================================================================
// NextAuth tables only - business logic handled by Supabase
// ============================================================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
